#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")

#include <bits/stdc++.h>
using namespace std;
#define _USE_MATH_DEFINES

typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;
typedef complex<ld> pt;
typedef vector<pt> pol;

const char nl = '\n';
const int INF = 0x3f3f3f3f;
const ll INFLL = 0x3f3f3f3f3f3f3f3f;
const ll MOD = 1e9+7;
const ld EPS = 1e-10;
mt19937 rng(chrono::high_resolution_clock::now().time_since_epoch().count());

int get_num(int x, int cut) {
  int cnt = 0;
  for (int i=1; i<=x+1; i++) {
    int r = (cut+i-1)/i;
    cnt += r;
  }
  return cnt;
}

ll get_sum(int n, int x, int cut) {
  ll sum = 0;
  int top = 0;
  int cnt = 0;
  for (int i=1; i<=x+1; i++) {
    ll r = (cut+i-1)/i;
    cnt += r;
    if ((cut-1)%i == 0) top++;
    sum += r*(r*i-(i-2))/2;
  }
  return sum - (ll)min(top, cnt-n)*cut;
}

ll solve(int n, int t, int x, int& cutoff) {
  int left = 1;
  int right = min(n,t+3);
  while (left < right) {
    int mid = (left+right)/2;
    if (get_num(x, mid) < n) {
      left = mid+1;
    } else {
      right = mid;
    }
  }
  cutoff = left;
  return get_sum(n, x, left) + (ll)x*t;
}

vector<ll> approx = { 999999,992930,984481,975503,966194,956623,946858,936928,926852,916641,906331,895923,885412,874817,864171,853427,842629,831769,820825,809864,798822,787723,776615,765444,754207,742963,731646,720303,708936,697525,686074,674601,663091,651532,639977,628354,616720,605073,593389,581654,569937,558185,546367,534594,522736,510867,499013,487083,475162,463230,451274,439268,427265,415257,403199,391139,379071,366965,354861,342735,330577,318417,306239,294009,281829,269587,257353,245085,232827,220531,208219,195927,183555,171241,158875,146508,134104,121704,109282,96888,84451,79832,79095,78350,77614,76872,76130,75388,74646,73904,73168,72422,71678,70942,70198,69456,68718,67974,67235,66490,65752,65006,64270,63525,62784,62038,61298,60558,59815,59078,58334,57590,56846,56106,55360,54624,53882,53138,52398,51654,50912,50168,49428,48686,47946,47202,46462,45716,44978,44234,43487,43159,42896,42635,42372,42110,41846,41584,41322,41061,40800,40538,40274,40013,39750,39487,39226,38964,38703,38442,38178,37915,37652,37393,37129,36868,36606,36345,36082,35818,35558,35295,35032,34766,34509,34246,33985,33721,33458,33197,32936,32672,32412,32149,31886,31625,31362,31098,30835,30576,30310,30086,29952,29818,29684,29551,29418,29284,29149,29018,28884,28752,28617,28482,28349,28218,28082,27949,27814,27682,27548,27415,27282,27149,27012,26881,26748,26614,26482,26346,26212,26080,25946,25812,25678,25545,25412,25278,25145,25010,24878,24744,24609,24476,24342,24210,24076,23941,23810,23674,23544,23408,23275,23178,23097,23013,22934,22853,22773,22691,22611,22530,22449,22368,22288,22208,22126,22046,21965,21884,21803,21722,21642,21561,21480,21398,21318,21238,21157,21076,20994,20914,20834,20753,20672,20591,20510,20428,20349,20268,20188,20106,20027,19946,19863,19783,19702,19621,19541,19459,19379,19298,19218,19135,19056,18979,18925,18871,18816,18763,18709,18654,18601,18546,18492,18438,18384,18330,18276,18222,18168,18114,18059,18006,17952,17897,17843,17789,17736,17680,17628,17572,17518,17465,17411,17356,17303,17247,17194,17140,17085,17032,16978,16922,16869,16815,16761,16707,16652,16599,16544,16490,16436,16382,16329,16274,16220,16166,16112,16070,16031,15992,15953,15915,15876,15837,15799,15760,15721,15683,15644,15606,15567,15528,15488,15450,15411,15373,15335,15295,15256,15218,15179,15140,15101,15063,15023,14985,14947,14907,14869,14831,14792,14753,14715,14676,14637,14598,14558,14520,14481,14442,14404,14365,14327,14288,14250,14210,14171,14132,14094,14055,14017,13985,13956,13927,13898,13869,13840,13810,13782,13753,13721,13694,13665,13636,13607,13577,13548,13519,13490,13462,13433,13403,13373,13345,13315,13287,13258,13229,13199,13171,13141,13112,13083,13054,13024,12996,12967,12937,12909,12879,12850,12821,12791,12763,12733,12705,12676,12647,12618,12588,12559,12529,12501,12471,12442,12414,12392,12369,12345,12323,12300,12278,12255,12233,12210,12187,12164,12142,12119,12097,12074,12052,12029,12006,11983,11960,11938,11916,11893,11870,11847,11825,11802,11779,11756,11734,11711,11689,11666,11644,11621,11598,11576,11552,11530,11508,11485,11462,11439,11417,11395,11372,11349,11327,11304,11281,11258,11236,11213,11191,11168,11148,11130,11112,11094,11076,11058,11039,11021,11003,10985,10967,10948,10931,10913,10895,10876,10859,10840,10821,10803,10786,10767,10749,10731,10713,10695,10677,10659,10641,10623,10604,10586,10568,10551,10532,10514,10495,10477,10460,10441,10423,10406,10387,10369,10350,10333,10314,10296,10278,10260,10242,10223,10205,10187,10169,10151,10136,10121,10106,10092,10076,10062,10046,10032,10017,10002,9987,9972,9958,9943,9928,9913,9898,9884,9869,9853,9839,9824,9809,9795,9780,9764,9749,9735,9720,9706,9690,9676,9661,9646,9631,9616,9601,9586,9572,9557,9542,9527,9512,9498,9483,9468,9453,9439,9423,9408,9394,9379,9364,9349,9335,9319,9306,9293,9281,9269,9256,9244,9231,9219,9207,9195,9183,9169,9157,9145,9133,9121,9108,9095,9083,9070,9059,9046,9034,9022,9009,8996,8984,8972,8960,8947,8935,8923,8910,8898,8885,8873,8861,8848,8836,8824,8811,8799,8786,8774,8762,8749,8737,8725,8712,8700,8688,8676,8663,8650,8638,8626,8613,8602,8591,8581,8571,8560,8550,8539,8529,8518,8508,8497,8487,8477,8466,8455,8445,8435,8424,8414,8404,8393,8382,8372,8361,8351,8341,8330,8319,8309,8299,8288,8278,8267,8257,8246,8236,8226,8215,8204,8195,8184,8173,8163,8152,8142,8131,8121,8110,8100,8089,8079,8069,8058,8047,8037,8027,8016,8006,7997,7988,7979,7970,7961,7952,7943,7934,7926,7916,7907,7899,7890,7881,7872,7862,7853,7844,7836,7827,7818,7809,7800,7791,7782,7773,7764,7755,7746,7737,7728,7719,7710,7701,7692,7684,7674,7666,7657,7648,7638,7629,7620,7612,7603,7593,7585,7576,7567,7558,7549,7540,7531,7522,7513,7504,7495,7486,7479,7471,7463,7456,7448,7440,7432,7424,7417,7409,7401,7393,7386,7378,7370,7362,7354,7347,7339,7331,7324,7316,7308,7300,7293,7285,7277,7269,7262,7254,7246,7238,7230,7222,7215,7207,7199,7191,7184,7176,7168,7160,7153,7145,7137,7129,7122,7114,7106,7098,7091,7083,7075,7067,7059,7051,7044,7037,7030,7023,7016,7009,7002,6996,6989,6982,6975,6969,6962,6955,6948,6941,6935,6928,6921,6914,6908,6901,6894,6887,6880,6873,6867,6860,6853,6846,6839,6833,6826,6819,6812,6805,6799,6792,6785,6778,6771,6764,6758,6751,6744,6738,6731,6724,6717,6710,6704,6697,6690,6683,6676,6669,6663,6656,6650,6642,6636,6630,6624,6618,6612,6606,6600,6594,6589,6583,6577,6570,6564,6558,6552,6546,6540,6535,6529,6523,6516,6510,6504,6498,6492,6487,6480,6475,6469,6463,6456,6450,6444,6439,6433,6426,6421,6414,6409,6403,6397,6390,6385,6379,6373,6366,6361,6355,6348,6343,6336,6331,6325,6319,6313,6307,6301,6295,6289,6283,6278,6272,6267,6262,6256,6251,6246,6241,6235,6230,6225,6219,6214,6209,6203,6198,6193,6187,6182,6177,6171,6166,6161,6155,6150,6145,6139,6134,6129,6123,6118,6113,6108,6102,6097,6092 };
int UP = 600;
int DOWN = 600;

//#define FILEIO
int main() {
  ios::sync_with_stdio(0);
  cin.tie(0); cout.tie(0);
  cout << fixed << setprecision(10);
#ifdef FILEIO
  freopen("test.in", "r", stdin);
  freopen("test.out", "w", stdout);
#endif

  int n, t;
  cin >> n >> t;

  int left = max(0, min(999, (int)round(1e3*t/n)+3));
  int right = min(999, max(0, (int)round(1e3*t/n)-3));
  left = min(n-1, max(0, (int)round(n/1e6*approx[left])-DOWN));
  right = min(n-1, (int)round(n/1e6*approx[right])+UP);
  cerr << "left: " << left << "   right: " << right << nl;
  int cutoff = 0;
  while (left < right) {
    int mid = (left+right)/2;
    ll lval = solve(n, t, mid, cutoff);
    ll rval = solve(n, t, mid+1, cutoff);
    if (lval > rval) {
      left = mid+1;
    } else {
      right = mid;
    }
  }

  cout << solve(n, t, left, cutoff) << nl;
  cout << left << nl;
  cerr << "chocolates: " << left << nl;

  vector<pii> lasts;
  for (int i=1; i<=left; i++) {
    int r = (cutoff+i-1)/i;
    lasts.push_back(pii(1+(r-1)*i, i));
  }
  sort(lasts.begin(), lasts.end(), greater<pii>());

  int cnt = get_num(left, cutoff);
  assert(cnt-n <= left);
  set<int> remove;
  for (int i=0; i<cnt-n; i++) {
    remove.insert(lasts[i].second);
  }

  int id = 0;
  for (int i=1; i<=left; i++) {
    int r = (cutoff+i-1)/i;
    if (remove.count(i)) {
      id += r-1;
    } else {
      id += r;
    }
    cout << id << " ";
  }
  cout << nl;

  return 0;
}
