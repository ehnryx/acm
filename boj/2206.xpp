int n, m;
cin >> n >> m;
vector g(n, vector<char>(m));
for(int i=0; i<n; i++) {
  for(int j=0; j<m; j++) {
    cin >> g[i][j];
  }
}
auto get = [m](int i, int j, int r) {
  return 2 * (i*m + j) + r;
};
vector<int> dist(n*m * 2, -1);
queue<tuple<int, int, int>> bfs;
dist[get(0, 0, 0)] = 1;
bfs.emplace(0, 0, 0);
while(not empty(bfs)) {
  auto [i, j, r] = bfs.front();
  bfs.pop();
  for(auto [di, dj] : {
      pair(0, 1), pair(1, 0), pair(-1, 0), pair(0, -1) }) {
    int ni = i + di;
    int nj = j + dj;
    if(ni < 0 or n <= ni or nj < 0 or m <= nj) continue;
    if(g[ni][nj] == '1') {
      if(r == 1) continue;
      if(dist[get(ni, nj, r + 1)] != -1) continue;
      dist[get(ni, nj, r + 1)] = dist[get(i, j, r)] + 1;
      bfs.emplace(ni, nj, r + 1);
    } else {
      if(dist[get(ni, nj, r)] != -1) continue;
      dist[get(ni, nj, r)] = dist[get(i, j, r)] + 1;
      bfs.emplace(ni, nj, r);
    }
  }
}
int ans = min<unsigned>(dist[get(n-1, m-1, 0)], dist[get(n-1, m-1, 1)]);
cout << ans << nl;
