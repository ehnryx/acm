__main__:
int n, m;
cin >> n >> m;
vector have = { pair(1, 1), pair(n, n) };
auto dist = [&](int i, int j) {
  return abs(have[i].first - have[j].first) + abs(have[i].second - have[j].second);
};
vector dp(1, 0);
vector ans(m+2, vector(m+2, -1));
for(int i=2; i<m+2; i++) {
  int a, b;
  cin >> a >> b;
  have.emplace_back(a, b);
  vector ndp(i, numeric_limits<int>::max());
  for(int j=0; j<i-1; j++) {
    // keep j
    if(int cur = dp[j] + dist(i, i-1); cur < ndp[j]) {
      ndp[j] = cur;
      ans[i][j] = j;
    }
    // keep i-1
    if(int cur = dp[j] + dist(i, j); cur < ndp[i-1]) {
      ndp[i-1] = cur;
      ans[i][i-1] = j;
    }
  }
  dp = move(ndp);
}
auto it = min_element(begin(dp), end(dp));
cout << *it << nl;

vector<int> res(m+2);
for(int i = m+1, val = 1, u = distance(begin(dp), it);
    u != -1; u = ans[i--][u]) {
  res[i] = val;
  if(ans[i][u] != u) {
    val ^= 1 ^ 2;
  }
}
bool ok = (res[0] == 1 or res[1] == 2);
for(int i : res | views::drop(2)) {
  cout << (ok ? i : i ^ 1 ^ 2) << nl;
}
