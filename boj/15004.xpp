%:include "geometry/circle.h"
%:include "graph/dijkstra.h"

using Point = point<int>;
using Circle = circle<int>;

__main__:
vector<decltype(declval<Circle>().intersect(declval<Circle>()).get_one())> p;
for(int i=0; i<2; i++) {
  int x, y;
  cin >> x >> y;
  p.emplace_back(x, y);
}

int n;
cin >> n;
vector<Circle> circles;
for(int i=0; i<n; i++) {
  int x, y, r;
  cin >> x >> y >> r;
  circles.emplace_back(Point(x, y), r);
}

for(int i=0; i<n; i++) {
  for(int j=0; j<i; j++) {
    auto it = circles[i].intersect(circles[j]);
    auto jt = circles[j].intersect(circles[i]);
    if(int cnt = it.count(); cnt == 1) {
      p.push_back(it.get_one());
    } else if(cnt == 2) {
      auto [u, v] = it.get_two();
      auto [jv, ju] = jt.get_two();
      assert(abs(u - ju) < EPS and abs(v - jv) < EPS);
      p.push_back(u);
      p.push_back(v);
    }
  }
}

graph_t<ld> g(size(p));

for(int i=0; i<size(p); i++) {
  for(int j=0; j<i; j++) {
    auto d2 = norm(p[j] - p[i]);
    vector<pair<ld, int>> ev;
    for (const auto& c : circles) {
      auto it = c.intersect(p[i], p[j]);
      if(it.count() != 2) continue;
      auto [u, v] = it.get_two();
      using I = decay_t<decltype(u)>;
      auto s = dot(u - I(p[i]), I(p[j] - p[i])) / d2 - EPS;
      auto t = dot(v - I(p[i]), I(p[j] - p[i])) / d2 + EPS;
      ev.emplace_back(s, 1);
      ev.emplace_back(t, -1);
    }
    ev.emplace_back(0, 0);
    ev.emplace_back(1, 0);
    sort(begin(ev), end(ev));
    bool ok = true;
    int depth = 0;
    for(auto [d, s] : ev) {
      depth += s;
      if(depth == 0 and 0 <= d and d <= 1) {
        ok = false;
        break;
      }
    }
    if(ok) {
      g.add_edge(i, j, abs(p[i] - p[j]));
    }
  }
}

auto ans = dijkstra(g, typename decltype(g)::weight_t(-1)).run(0).dist[1];
if(ans == -1) {
  cout << "impossible" << nl;
} else {
  cout << ans << nl;
}
