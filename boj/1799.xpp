int n;
cin >> n;
vector g(n, vector<int>(n));
for(int i=0; i<n; i++) {
  for(int j=0; j<n; j++) {
    cin >> g[i][j];
  }
}
const int dn = 2*n - 1;

dinic<int> graph(2 * dn + 2);
const int source = 2 * dn;
const int sink = source + 1;
for(int i=0; i<dn; i++) {
  graph.add_edge(source, i, 1);
  graph.add_edge(dn + i, sink, 1);
  for(int j=0; j<dn; j++) {
    // (x, y) = (i, 0) + t(-1, 1)
    // (x, y) = (n-1-j, 0) + t(1, 1)
    // i-t = n-1-j + t
    // 2t  = i+j - n + 1
    int t = (i + j - n + 1);
    if(t % 2) continue;
    t /= 2;
    int x = i - t;
    int y = t;
    if(x<0 or x>=n or y<0 or y>=n or not g[x][y]) continue;
    graph.add_edge(i, dn + j, 1);
  }
}
cout << graph.flow(source, sink) << nl;
