%:include "ds/segment_tree.h"
%:include "ds/segment_tree_nodes_sum.h"
%:include "utility/output.h"

using sum_tree = segment_tree<segment_tree_nodes::range_add_range_sum<ll>>;

struct node {
  using out_t = ll;
  ll value, g;
  node() = default;
  node(ll v): value(v), g(v) {}
  void put(ll v) { value += v; g += v; }
  ll get() const { return g; }
  void pull(const node& l, const node& r) {
    g = gcd(l.g, r.g);
  }
  static ll merge(ll a, ll b) { return gcd(a, b); }
  static ll default_value() { return 0; }
};

__main__:
int n;
cin >> n;
vector<ll> a(n+2);
for(int i=1; i<=n; i++) {
  cin >> a[i];
}
decltype(a) b;
adjacent_difference(begin(a), end(a), back_inserter(b));
b.push_back(0);

segment_tree<node> st(b);
sum_tree sum(a);
int q;
cin >> q;
while(q--) {
  ll v; int l, r;
  cin >> v >> l >> r;
  if(v) {
    st.update_point(l, v);
    st.update_point(r+1, -v);
    sum.update_range(l, r, v);
  } else {
    ll g = st.query_range(l+1, r);
    cout << gcd(g, sum.query_point(l)) << nl;
  }
}
