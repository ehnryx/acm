from collections import deque, defaultdict
from itertools import product, permutations, accumulate
from itertools import zip_longest, groupby, takewhile
from heapq import heappush, heappop, heapify, merge
import sys
big = 1999999999999999999
#IN = [ x.strip() for x in sys.stdin ]



IN = [
[5,[7,[8,4]]],
[[[4,1],[6,[9,3]]],[[7,4],[5,[7,0]]]],
[[6,2],[[[8,6],[5,5]],0]],
[[[5,9],[3,[4,2]]],[[[1,2],0],2]],
[[[[4,3],2],0],[[[1,7],[1,2]],[[8,2],[6,7]]]],
[[[[0,1],9],3],[[4,7],[7,8]]],
[[[[8,7],4],[5,[9,2]]],[[8,[9,6]],[1,8]]],
[[[2,3],[[9,9],[7,0]]],[6,7]],
[8,[[9,9],[8,6]]],
[[[[5,7],[7,1]],[3,[7,6]]],[2,[[5,5],[8,3]]]],
[[[7,0],2],[[[2,2],7],[6,[2,9]]]],
[[6,2],[[0,8],8]],
[[[[2,9],4],9],[1,[[6,9],[7,5]]]],
[[[9,3],[[5,7],[3,1]]],[5,[6,[7,8]]]],
[0,[[8,9],1]],
[[4,[[4,3],4]],[7,[[4,0],0]]],
[[0,[[1,9],[6,1]]],[[[7,0],[5,2]],[[3,8],[0,4]]]],
[[[2,7],[7,[1,6]]],[6,[[8,7],[8,5]]]],
[[9,5],[[1,[2,5]],[8,[2,0]]]],
[6,[[8,[9,4]],[9,8]]],
[[[[2,0],[4,6]],3],[[8,0],4]],
[[[8,8],[[5,7],[5,6]]],5],
[[5,[[7,9],9]],[1,6]],
[[[[5,2],[4,9]],[[1,9],[2,9]]],[[[6,8],[7,5]],[[0,2],4]]],
[1,[5,[[5,5],[1,2]]]],
[[[1,4],[[0,3],7]],[[[9,1],9],[[2,3],7]]],
[[[[6,4],[4,0]],[[3,4],[7,0]]],[[8,7],[5,[0,6]]]],
[[3,[8,[2,8]]],[9,[0,[5,2]]]],
[[7,[[1,8],1]],[6,[6,6]]],
[[[3,[9,4]],[[3,2],[5,2]]],8],
[3,[[4,[4,3]],[5,[9,2]]]],
[[[1,8],[2,[7,5]]],[[0,[8,1]],[2,0]]],
[1,3],
[7,[[[9,6],[8,4]],9]],
[6,4],
[[[8,9],[[3,7],2]],[4,[[5,0],8]]],
[[[[1,8],[7,9]],0],[[[4,4],3],[4,[1,7]]]],
[[[[2,2],[0,9]],[1,2]],[[[9,1],[0,0]],[[1,6],4]]],
[[[[8,1],6],[[3,3],[6,7]]],[[2,3],5]],
[[[[9,0],7],6],[[[3,6],[6,7]],3]],
[[[[1,0],6],[5,[0,0]]],[[[9,7],7],5]],
[[[[5,1],4],[[7,7],[6,2]]],[[0,[6,0]],2]],
[[[[8,3],[0,4]],[[9,9],[3,7]]],[[[2,7],[2,9]],[[2,0],[4,7]]]],
[6,[[[4,8],0],8]],
[[[6,[5,9]],[[0,3],9]],[[[2,5],[9,5]],0]],
[[1,4],[6,[0,[6,2]]]],
[9,[[[3,7],1],7]],
[[[2,3],[[1,2],1]],[[[2,6],[0,1]],[0,[4,1]]]],
[[[0,1],[[0,3],[7,3]]],[[8,7],3]],
[[0,[[1,5],[5,3]]],4],
[[[5,3],[[5,8],6]],[[[6,0],3],[4,1]]],
[8,3],
[[[[5,5],[3,0]],6],[[7,5],[2,[9,4]]]],
[[[3,[3,3]],[[4,7],4]],[[2,0],1]],
[[[0,[2,8]],[4,[7,9]]],[[[5,4],2],2]],
[[3,[7,[1,8]]],[5,[[8,2],0]]],
[[1,9],[[6,[5,9]],8]],
[[5,[5,2]],5],
[[[1,1],[4,3]],1],
[[[[6,9],[4,1]],0],[[[3,0],6],7]],
[[9,[[7,3],6]],[[[7,2],0],[9,9]]],
[[5,4],[[[6,0],[5,1]],7]],
[[[4,0],0],[[[2,6],[4,4]],[[6,8],2]]],
[[[9,6],8],[[0,[9,5]],9]],
[[6,[2,5]],[[[1,8],[9,0]],[[4,0],[5,7]]]],
[5,[[8,[9,9]],[5,[6,8]]]],
[[[7,[9,0]],5],6],
[[9,[[3,7],[3,0]]],[[[7,2],[5,7]],[[0,5],[7,4]]]],
[[7,3],[[6,5],[9,4]]],
[[4,[4,3]],[9,[[2,6],0]]],
[[[6,[0,1]],9],[[7,[3,2]],[[0,1],[5,2]]]],
[[5,[0,[3,1]]],[[[1,1],[8,9]],[[6,3],[0,9]]]],
[[[[2,8],0],[[8,7],4]],[[[9,6],3],[[7,8],[2,3]]]],
[[[[1,0],1],4],[4,9]],
[[[7,8],5],[[[3,7],[5,7]],6]],
[[[8,[7,4]],[[1,6],[6,7]]],[2,4]],
[[7,8],3],
[[0,[4,[3,8]]],[[[1,0],1],6]],
[[[[6,3],7],2],[[4,5],6]],
[[[5,9],[[1,8],1]],[[[1,8],8],[[6,4],0]]],
[[3,[8,[2,8]]],[[[2,8],[4,4]],9]],
[7,[5,[[3,3],3]]],
[3,[1,[0,[3,0]]]],
[[[1,2],4],[9,[[7,1],[5,4]]]],
[[[5,8],[7,[0,7]]],[0,[[2,9],8]]],
[[[7,[2,0]],[1,[4,3]]],[0,[[1,1],[2,0]]]],
[[[2,[2,5]],[4,1]],[0,[6,0]]],
[[[8,3],9],[[[4,3],[5,8]],[[7,0],9]]],
[2,[1,4]],
[[[3,[2,6]],6],[[[3,2],[0,8]],[[3,5],[6,4]]]],
[[[1,[3,3]],[[0,8],[1,3]]],[8,[[3,8],[0,8]]]],
[[[[1,5],[0,1]],3],[[6,[1,7]],[4,7]]],
[[4,[5,7]],[6,[[6,2],7]]],
[[[[7,4],[3,1]],[5,6]],[0,[6,5]]],
[[[7,[0,0]],6],[5,[[0,0],[3,5]]]],
[[[[8,7],[5,8]],[8,[9,3]]],[[7,0],[[7,2],0]]],
[[[7,[4,2]],0],[[[4,0],1],3]],
[[[6,3],[9,[2,2]]],[[0,8],[1,2]]],
[3,[[3,1],[[7,1],1]]],
[[3,[[4,0],7]],[[[4,6],[2,3]],[[0,2],[1,8]]]],
]

def g(a):
  if isinstance(a, int):
    if a >= 10:
      return [a//2, (a+1)//2], True
    return a, False
  L, d = g(a[0])
  if d:
    return [L, a[1]], True
  R, d = g(a[1])
  if d:
    return [a[0], R], True
  return a, False

def f(a):
  s = str(a).replace(' ','')
  #print("F",s)
  d = 0
  L = -1
  R = -1
  for i, c in enumerate(s):
    if c == '[':
      d += 1
      if d == 5:
        L = i
    elif c == ']':
      if d == 5:
        R = i
        break
      d -= 1

  #print(L,R)
  if L != -1:
    x, y = eval(s[L:R+1])
    #print(x, y, "<<<", s[L:R+1])

    l = L
    while l >= 0:
      if s[l] not in "[,]":
        break
      l -= 1
    if l != -1:
      ll = l
      while ll >= 0:
        if s[ll] in "[,]":
          break
        ll -= 1
      sL = s[:ll+1] + str(int(s[ll+1:l+1]) + x) + s[l+1:L]
    else:
      sL = s[:L]

    r = R
    while r < len(s):
      if s[r] not in "[,]":
        break
      r += 1
    if r < len(s):
      rr = r
      while rr < len(s):
        if s[rr] in "[,]":
          break
        rr += 1
      sR = s[R+1:r] + str(int(s[r:rr]) + y) + s[rr:]
    else:
      sR = s[R+1:]

    s = sL + '0' + sR
    #print(sL)
    #print(sR)
    #print("->",s)
    return f(eval(s))

  #print(a, ">>>", g(a)[0])
  a, ok = g(a)
  if ok:
    return f(a)
  else:
    return a

"""
a = IN[0]
for b in IN[1:]:
  a = [a, b]
  #print("A",a)
  a = f(a)

#print(a)
"""

best = 0

def ANS(a):
  if isinstance(a, int):
    return a
  return 3*ANS(a[0]) + 2*ANS(a[1])

for i in range(len(IN)):
  for j in range(len(IN)):
    if i == j:
      continue
    best = max(best, ANS(f([IN[i], IN[j]])))
print(best)

##print(ANS(a))

